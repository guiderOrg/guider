diff --git a/arch/arm/kernel/stacktrace.c b/arch/arm/kernel/stacktrace.c
index 92b7237..084484c 100644
--- a/arch/arm/kernel/stacktrace.c
+++ b/arch/arm/kernel/stacktrace.c
@@ -1,7 +1,9 @@
 #include <linux/export.h>
 #include <linux/sched.h>
 #include <linux/stacktrace.h>
+#include <linux/uaccess.h>
 
+#include <asm/uaccess.h>
 #include <asm/stacktrace.h>
 #include <asm/traps.h>
 
@@ -177,3 +179,95 @@ void save_stack_trace(struct stack_trace *trace)
 }
 EXPORT_SYMBOL_GPL(save_stack_trace);
 #endif
+
+#ifdef CONFIG_USER_STACKTRACE_SUPPORT
+/*
+ * Patch to use user stack tracer for ARM archtecture
+ * 1. enable CONFIG_USER_STACKTRACE_SUPPORT option
+ * 2. patch this file and rebuild your kernel
+ * 3. rebuild target binary with -g -rdynamic -fno-omit-frame-pointer option
+ */
+struct stack_frame_user {
+        unsigned long next_fp;
+        unsigned long pc;
+};
+
+static int
+copy_stack_frame_user(const void __user *fp, struct stack_frame_user *frame)
+{
+	if (!access_ok(VERIFY_READ, fp, sizeof(*frame)))
+		return 0;
+
+	pagefault_disable();
+
+	if (__copy_from_user_inatomic(frame, fp, sizeof(*frame))) {
+		pagefault_enable();
+		return 0;
+	} else {
+		pagefault_enable();
+		return 1;
+	}
+}
+
+static inline void __save_stack_trace_user(struct stack_trace *trace)
+{
+	int nr_try = 0;
+        const struct pt_regs *regs = task_pt_regs(current);
+        const void __user *fp = (const void __user *)regs->ARM_fp;
+        const void __user *pc = (const void __user *)regs->ARM_pc;
+        const void __user *lr = (const void __user *)regs->ARM_lr;
+        const void __user *sp = (const void __user *)regs->ARM_sp;
+
+	trace->entries[trace->nr_entries++] = pc;
+	trace->entries[trace->nr_entries++] = lr;
+
+        while (trace->nr_entries < trace->max_entries &&
+	       nr_try++ < trace->max_entries) {
+                struct stack_frame_user frame;
+
+		/* Thumb mode */
+		if ((unsigned long)pc & 0x1) {
+			/*
+			 * Thumb code is not supported because
+			 * FP register is not used in Thumb mode.
+			 * so that it is impossible to know
+			 * base addr or size of stack frame.
+			 */
+			trace->entries[trace->nr_entries++] =
+				0xC0FFEE;
+			break;
+		/* ARM mode */
+		} else {
+			if (!copy_stack_frame_user(fp - 4, &frame))
+				break;
+
+			if (!frame.pc) {
+				break;
+			} else if (frame.pc < frame.next_fp) {
+				if (frame.pc != lr)
+					trace->entries[trace->nr_entries++] =
+						frame.pc;
+
+				fp = (const void __user *)frame.next_fp;
+			} else if (frame.pc > (unsigned long)sp) {
+				fp = (const void __user *)frame.pc;
+			} else {
+				break;
+			}
+
+			pc = (const void __user *)frame.pc;
+		}
+	}
+}
+
+void save_stack_trace_user(struct stack_trace *trace)
+{
+        if (current->mm) {
+                __save_stack_trace_user(trace);
+
+		if (trace->nr_entries < trace->max_entries)
+			trace->entries[trace->nr_entries++] =
+				ULONG_MAX;
+        }
+}
+#endif
