diff --git a/arch/arm/kernel/stacktrace.c b/arch/arm/kernel/stacktrace.c
index 00f79e5..53d77f3 100755
--- a/arch/arm/kernel/stacktrace.c
+++ b/arch/arm/kernel/stacktrace.c
@@ -1,7 +1,9 @@
 #include <linux/export.h>
 #include <linux/sched.h>
 #include <linux/stacktrace.h>
+#include <linux/uaccess.h>
 
+#include <asm/uaccess.h>
 #include <asm/stacktrace.h>
 
 #if defined(CONFIG_FRAME_POINTER) && !defined(CONFIG_ARM_UNWIND)
@@ -129,3 +131,83 @@ void save_stack_trace(struct stack_trace *trace)
 }
 EXPORT_SYMBOL_GPL(save_stack_trace);
 #endif
+
+#ifdef CONFIG_USER_STACKTRACE_SUPPORT
+/*
+ * Patch to use user stack tracer for ARM archtecture
+ * 1. enable CONFIG_USER_STACKTRACE_SUPPORT option
+ * 2. patch this file and rebuild your kernel
+ * 3. build target module to trace with -g -rdynamic -fno-omit-frame-pointer option
+ */
+struct stack_frame_user {
+        unsigned long pc;
+        unsigned long ip;
+        unsigned long sp;
+        unsigned long next_fp;
+        unsigned long lr;
+};
+
+static int
+copy_stack_frame(const void __user *fp, struct stack_frame_user *frame)
+{
+        if (!access_ok(VERIFY_READ, fp, sizeof(*frame)))
+                return 0;
+
+        pagefault_disable();
+        if (__copy_from_user_inatomic(frame, fp, sizeof(*frame))) {
+		pagefault_enable();
+		return 0;
+	}
+
+        pagefault_enable();
+
+        return 1;
+}
+
+static inline void __save_stack_trace_user(struct stack_trace *trace)
+{
+        const struct pt_regs *regs = task_pt_regs(current);
+        const void __user *fp = (const void __user *)regs->ARM_fp;
+
+        if (trace->nr_entries < trace->max_entries){
+                trace->entries[trace->nr_entries++] = regs->ARM_pc;
+                trace->entries[trace->nr_entries++] = regs->ARM_lr;
+	}
+
+        while (trace->nr_entries < trace->max_entries) {
+                struct stack_frame_user frame;
+
+                if (!copy_stack_frame(fp, &frame))
+			break;
+
+                if (frame.pc) {
+                        trace->entries[trace->nr_entries++] =
+                                frame.pc;
+		} else {
+			break;
+		}
+
+                if (frame.lr) {
+                        trace->entries[trace->nr_entries++] =
+				frame.lr;
+		} else {
+			break;
+		}
+
+		fp = frame.next_fp;
+
+                if ((unsigned long)fp < regs->ARM_sp ||
+		    fp == NULL || frame.pc == frame.lr)
+			break;
+        }
+}
+
+void save_stack_trace_user(struct stack_trace *trace)
+{
+        if (current->mm) {
+                __save_stack_trace_user(trace);
+        }
+        if (trace->nr_entries < trace->max_entries)
+                trace->entries[trace->nr_entries++] = ULONG_MAX;
+}
+#endif
